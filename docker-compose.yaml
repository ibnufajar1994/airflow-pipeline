version: '3.8'
services:

  airflow:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow_standalone
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW_DB_URI}
      - AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS=False
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
    depends_on:
      - airflow_metadata
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./include:/opt/airflow/include
    networks:
      - airflow-networks

  airflow_metadata:
    image: postgres:latest
    container_name: airflow_metadata
    environment:
      POSTGRES_USER: ${AIRFLOW_DB_USER}
      POSTGRES_PASSWORD: ${AIRFLOW_DB_PASSWORD}
      POSTGRES_DB: ${AIRFLOW_DB_NAME}
    ports:
      - 5433:5432
    volumes:
      - airflow_metadata:/var/lib/postgresql/data
    networks:
      - airflow-networks

  aircraft_db:
    image: postgres:latest
    container_name: aircraft_db
    environment:
      POSTGRES_USER: ${AIRCRAFT_DB_USER}
      POSTGRES_PASSWORD: ${AIRCRAFT_DB_PASSWORD}
      POSTGRES_DB: ${AIRCRAFT_DB_NAME}
    ports:
      - 5434:5432
    networks:
      - airflow-networks
    volumes:
      - ./aircraft_data:/docker-entrypoint-initdb.d
      - aircraft_data:/var/lib/postgresql/data

  warehouse_db:
    image: postgres:latest
    container_name: warehouse_db
    environment:
      POSTGRES_USER: ${WAREHOUSE_DB_USER}
      POSTGRES_PASSWORD: ${WAREHOUSE_DB_PASSWORD}
      POSTGRES_DB: ${WAREHOUSE_DB_NAME}
    ports:
      - 5435:5432
    networks:
      - airflow-networks
    volumes:
      - ./warehouse_data:/docker-entrypoint-initdb.d
      - warehouse_data:/var/lib/postgresql/data

  minio:
    image: minio/minio:RELEASE.2024-06-13T22-53-53Z
    container_name: minio
    hostname: minio
    restart: always
    volumes:
      - minio-data:/data
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - airflow-networks

  minio-client:
    image: minio/mc
    container_name: minio-client
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c " mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} && mc mb local/flights-data-pipeline --ignore-existing "
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    networks:
      - airflow-networks
    restart: "no"

volumes:

  airflow_metadata:
    driver: local
    name: airflow_metadata

  aircraft_data:
    driver: local
    name: aircraft_data

  warehouse_data:
    driver: local
    name: warehouse_data

  minio-data:
    driver: local
    name: minio-data

networks:
  airflow-networks:
    driver: bridge
    name: airflow-networks
